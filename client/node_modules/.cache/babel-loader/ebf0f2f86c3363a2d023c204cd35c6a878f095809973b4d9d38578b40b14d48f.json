{"ast":null,"code":"var _jsxFileName = \"/Users/hansonliao/react101/Github/social-media-2/client/src/scenes/widgets/MyPostWidget.jsx\",\n  _s = $RefreshSig$();\nimport { EditOutlined, DeleteOutlined, AttachFileOutlined, GifBoxOutlined, ImageOutlined, MicOutlined, MoreHorizOutlined } from \"@mui/icons-material\";\nimport { Box, Divider, Typography, InputBase, Usetheme, Button, IconButton, useMediaQuery } from \"@mui/material\";\nimport Dropzone from \"react-dropzone\";\nimport FlexBetween from \"components/FlexBetween\";\nimport UserImage from \"components/UserImage\";\nimport WidgetWrapper from \"components/WidgetWrapper\";\nimport { useState, useDispatch, useSelector } from \"react\";\nimport { setPosts } from \"state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyPostWidget = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [isImage, setIsImage] = useState(false); //BOOLEAN: if User opens the image box (to upload an image)\n  const [image, setimage] = useState(null); //image file\n  const [post, setPost] = useState(\"\");\n  const {\n    palette\n  } = usetheme();\n  const {\n    _id\n  } = useSelector(state => state.user);\n  const token = useSelector(state => state.token); //checking authorization\n  const isNonMobileScreens = useMediaQuery(\" (min-width: 1000px) \");\n  const mediumMain = palette.neutral.mediumMain;\n  const medium = palette.neutral.medium;\n  const handlePost = async () => {\n    const formData = new FormData(); //we are passing in an image\n    formData.append(\"userId\", _id);\n    formData.append(\"description\", post);\n    if (image) {\n      //IF an image exists, THEN\n      formData.append(\"picture\", image); //REMINDER: we MUST label watever we want formData to upload, as \"picture\". This was set in server/index.js.\n      formData.append(\"picturePath\", image.name); //REMINDER: picturePath is the images url path, image name\n    }\n\n    const response = await fetch(`http://localhost:3001/posts`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      body: formData\n    });\n    const posts = await response.json();\n    dispatch(setPosts({\n      posts\n    }));\n    setimage(null);\n    setPost(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"MyPostWidget\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n};\n_s(MyPostWidget, \"s2B6r6nHJFLXBivEdMmaLZlnFu4=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useMediaQuery];\n});\n_c = MyPostWidget;\nexport default MyPostWidget;\nvar _c;\n$RefreshReg$(_c, \"MyPostWidget\");","map":{"version":3,"names":["EditOutlined","DeleteOutlined","AttachFileOutlined","GifBoxOutlined","ImageOutlined","MicOutlined","MoreHorizOutlined","Box","Divider","Typography","InputBase","Usetheme","Button","IconButton","useMediaQuery","Dropzone","FlexBetween","UserImage","WidgetWrapper","useState","useDispatch","useSelector","setPosts","jsxDEV","_jsxDEV","MyPostWidget","_s","dispatch","isImage","setIsImage","image","setimage","post","setPost","palette","usetheme","_id","state","user","token","isNonMobileScreens","mediumMain","neutral","medium","handlePost","formData","FormData","append","name","response","fetch","method","headers","Authorization","body","posts","json","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hansonliao/react101/Github/social-media-2/client/src/scenes/widgets/MyPostWidget.jsx"],"sourcesContent":["import {\n  EditOutlined,\n  DeleteOutlined,\n  AttachFileOutlined,\n  GifBoxOutlined,\n  ImageOutlined,\n  MicOutlined,\n  MoreHorizOutlined,\n} from \"@mui/icons-material\";\nimport {\n  Box,\n  Divider,\n  Typography,\n  InputBase,\n  Usetheme,\n  Button,\n  IconButton,\n  useMediaQuery,\n} from \"@mui/material\";\nimport Dropzone from \"react-dropzone\";\nimport FlexBetween from \"components/FlexBetween\";\nimport UserImage from \"components/UserImage\";\nimport WidgetWrapper from \"components/WidgetWrapper\";\nimport { useState, useDispatch, useSelector } from \"react\";\nimport { setPosts } from \"state\";\n\nconst MyPostWidget = () => {\n  const dispatch = useDispatch();\n  const [isImage, setIsImage] = useState(false); //BOOLEAN: if User opens the image box (to upload an image)\n  const [image, setimage] = useState(null); //image file\n  const [post, setPost] = useState(\"\");\n  const { palette } = usetheme();\n  const { _id } = useSelector((state) => state.user);\n  const token = useSelector((state) => state.token); //checking authorization\n  const isNonMobileScreens = useMediaQuery(\" (min-width: 1000px) \");\n  const mediumMain = palette.neutral.mediumMain;\n  const medium = palette.neutral.medium;\n\n  const handlePost = async () => {\n    const formData = new FormData(); //we are passing in an image\n    formData.append(\"userId\", _id);\n    formData.append(\"description\", post);\n    if (image) {\n      //IF an image exists, THEN\n      formData.append(\"picture\", image); //REMINDER: we MUST label watever we want formData to upload, as \"picture\". This was set in server/index.js.\n      formData.append(\"picturePath\", image.name); //REMINDER: picturePath is the images url path, image name\n    }\n\n    const response = await fetch(`http://localhost:3001/posts`, {\n      method: \"POST\",\n      headers: { Authorization: `Bearer ${token}` },\n      body: formData,\n    });\n\n    const posts = await response.json();\n    dispatch(setPosts({ posts }));\n    setimage(null);\n    setPost(\"\");\n  };\n\n  return <div>MyPostWidget</div>;\n};\n\nexport default MyPostWidget;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}