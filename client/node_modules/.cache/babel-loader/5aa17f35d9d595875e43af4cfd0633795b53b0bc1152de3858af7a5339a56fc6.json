{"ast":null,"code":"// this is where all redux is\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// global states! can be used anywhere in code app\nconst initialState = {\n  mode: \"light\",\n  user: null,\n  token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDUyOTU4ZWM4MWE4NDY5MGE4NmZmMSIsImlhdCI6MTY5MjEyOTk1NX0.tIyIKcAfuHXO2wcsRFpxJ9yL1PynTFirsoRMUOUewlQ\",\n  posts: []\n};\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    //functions that modify the global state up above initals\n    setMode: state => {\n      //wen user selects between light and dark mode\n      state.mode = state.mode === \"light\" ? \"dark\" : \"light\";\n    },\n    setLogin: (state, action) => {\n      //wen user presses \"Log in\" after inputting info:\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n    },\n    setLogout: state => {\n      state.user = null;\n      state.token = null;\n    },\n    setFriends: (state, action) => {\n      //show friends\n      if (state.user) {\n        // if user is loggin in\n        state.user.friends = action.payload.friends;\n      } else {\n        console.error(\"girl u dont got no friends LMAO\");\n      }\n    },\n    setPosts: (state, action) => {\n      //show posts\n      state.posts = action.payload.posts;\n    },\n    setPost: (state, action) => {\n      //updating a post\n      const updatedPosts = state.posts.map(post => {\n        if (post._id === action.payload.post._id) return action.payload.post; //REPLACE old post with new post\n        return post;\n      });\n      state.posts = updatedPosts;\n    }\n  }\n});\nexport const {\n  setMode,\n  setLogin,\n  setLogout,\n  setFriends,\n  setPosts,\n  setPost\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","mode","user","token","posts","authSlice","name","reducers","setMode","state","setLogin","action","payload","setLogout","setFriends","friends","console","error","setPosts","setPost","updatedPosts","map","post","_id","actions","reducer"],"sources":["/Users/hansonliao/react101/Github/social-media-2/client/src/state/index.js"],"sourcesContent":["// this is where all redux is\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// global states! can be used anywhere in code app\nconst initialState = {\n  mode: \"light\",\n  user: null,\n  token:\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDUyOTU4ZWM4MWE4NDY5MGE4NmZmMSIsImlhdCI6MTY5MjEyOTk1NX0.tIyIKcAfuHXO2wcsRFpxJ9yL1PynTFirsoRMUOUewlQ\",\n  posts: [],\n};\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    //functions that modify the global state up above initals\n    setMode: (state) => {\n      //wen user selects between light and dark mode\n      state.mode = state.mode === \"light\" ? \"dark\" : \"light\";\n    },\n    setLogin: (state, action) => {\n      //wen user presses \"Log in\" after inputting info:\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n    },\n    setLogout: (state) => {\n      state.user = null;\n      state.token = null;\n    },\n    setFriends: (state, action) => {\n      //show friends\n      if (state.user) {\n        // if user is loggin in\n        state.user.friends = action.payload.friends;\n      } else {\n        console.error(\"girl u dont got no friends LMAO\");\n      }\n    },\n    setPosts: (state, action) => {\n      //show posts\n      state.posts = action.payload.posts;\n    },\n    setPost: (state, action) => {\n      //updating a post\n      const updatedPosts = state.posts.map((post) => {\n        if (post._id === action.payload.post._id) return action.payload.post; //REPLACE old post with new post\n        return post;\n      });\n      state.posts = updatedPosts;\n    },\n  },\n});\n\nexport const { setMode, setLogin, setLogout, setFriends, setPosts, setPost } =\n  authSlice.actions;\n\nexport default authSlice.reducer;\n"],"mappings":"AAAA;;AAEA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,IAAI;EACVC,KAAK,EACH,sJAAsJ;EACxJC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGN,WAAW,CAAC;EACnCO,IAAI,EAAE,MAAM;EACZN,YAAY;EACZO,QAAQ,EAAE;IACR;IACAC,OAAO,EAAGC,KAAK,IAAK;MAClB;MACAA,KAAK,CAACR,IAAI,GAAGQ,KAAK,CAACR,IAAI,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACxD,CAAC;IACDS,QAAQ,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC3B;MACAF,KAAK,CAACP,IAAI,GAAGS,MAAM,CAACC,OAAO,CAACV,IAAI;MAChCO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACC,OAAO,CAACT,KAAK;IACpC,CAAC;IACDU,SAAS,EAAGJ,KAAK,IAAK;MACpBA,KAAK,CAACP,IAAI,GAAG,IAAI;MACjBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB,CAAC;IACDW,UAAU,EAAEA,CAACL,KAAK,EAAEE,MAAM,KAAK;MAC7B;MACA,IAAIF,KAAK,CAACP,IAAI,EAAE;QACd;QACAO,KAAK,CAACP,IAAI,CAACa,OAAO,GAAGJ,MAAM,CAACC,OAAO,CAACG,OAAO;MAC7C,CAAC,MAAM;QACLC,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC;MAClD;IACF,CAAC;IACDC,QAAQ,EAAEA,CAACT,KAAK,EAAEE,MAAM,KAAK;MAC3B;MACAF,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACC,OAAO,CAACR,KAAK;IACpC,CAAC;IACDe,OAAO,EAAEA,CAACV,KAAK,EAAEE,MAAM,KAAK;MAC1B;MACA,MAAMS,YAAY,GAAGX,KAAK,CAACL,KAAK,CAACiB,GAAG,CAAEC,IAAI,IAAK;QAC7C,IAAIA,IAAI,CAACC,GAAG,KAAKZ,MAAM,CAACC,OAAO,CAACU,IAAI,CAACC,GAAG,EAAE,OAAOZ,MAAM,CAACC,OAAO,CAACU,IAAI,CAAC,CAAC;QACtE,OAAOA,IAAI;MACb,CAAC,CAAC;MACFb,KAAK,CAACL,KAAK,GAAGgB,YAAY;IAC5B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEZ,OAAO;EAAEE,QAAQ;EAAEG,SAAS;EAAEC,UAAU;EAAEI,QAAQ;EAAEC;AAAQ,CAAC,GAC1Ed,SAAS,CAACmB,OAAO;AAEnB,eAAenB,SAAS,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}