{"ast":null,"code":"var _jsxFileName = \"/Users/hansonliao/react101/Github/social-media-2/client/src/scenes/loginPage/Form.jsx\",\n  _s = $RefreshSig$();\n// REGISTER FOR A NEW ACCOUNT\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { Box, Button, TextField, useMediaQuery, Typography, useTheme } from \"@mui/material\";\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { setLogin } from \"../../state/index\";\nimport Dropzone from \"../../components/FlexBetween\";\nimport FlexBetween from \"../../components/FlexBetween\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst registerSchema = yup.object().shape({\n  //wen validating user inputs, automated form private app \"yup\"\n  firstName: yup.string().required(\"required\"),\n  lastName: yup.string().required(\"required\"),\n  email: yup.string().email(\"invalid email\").required(\"required\"),\n  password: yup.string().required(\"required\"),\n  location: yup.string().required(\"required\"),\n  occupation: yup.string().required(\"required\"),\n  picture: yup.string().required(\"required\")\n});\nconst loginSchema = yup.object().shape({\n  email: yup.string().email(\"invalid email\").required(\"required\"),\n  password: yup.string().required(\"required\")\n});\nconst initialValuesRegister = {\n  //sets initial values\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  location: \"\",\n  occupation: \"\",\n  picture: \"\"\n};\nconst initialValuesLogin = {\n  email: \"\",\n  password: \"\"\n};\nconst Form = () => {\n  _s();\n  const [pageType, setPageType] = useState(\"Login\");\n  const {\n    palette\n  } = useTheme;\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const isNonMobile = useMediaQuery(\"(min-width: 600px\");\n  const isLogin = pageType === \"login\";\n  const isRegister = pageType === \"register\";\n  const handleFormSubmit = async (values, onSubmitProps) => {};\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    onSubmit: handleFormSubmit,\n    initialValues: isLogin ? initialValuesLogin : initialValuesRegister //IF we're on the isLogin page, THEN we initial the page with isLogin data. IF we're on register page, we submit the page with isRegister data\n    ,\n    validationSchema: isLogin ? loginSchema : registerSchema //using formic to validate user inputs\n    ,\n    children: ({\n      values,\n      errors,\n      touched,\n      handleBlur,\n      handleChange,\n      handleSubmit,\n      setFieldValue,\n      resetForm\n    } //these values allow u to use them inside your components\n    ) => /*#__PURE__*/_jsxDEV(\"form\", {\n      obSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        display: \"grid\",\n        gap: \"30px\",\n        gridTemplateColumns: \"repeat(4, minmax(0, 1fr)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Form, \"TEk9RduZFdpPjPrtOTkOHnB18mE=\", false, function () {\n  return [useDispatch, useNavigate, useMediaQuery];\n});\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","Box","Button","TextField","useMediaQuery","Typography","useTheme","EditOutlinedIcon","Formik","yup","useNavigate","useDispatch","setLogin","Dropzone","FlexBetween","jsxDEV","_jsxDEV","registerSchema","object","shape","firstName","string","required","lastName","email","password","location","occupation","picture","loginSchema","initialValuesRegister","initialValuesLogin","Form","_s","pageType","setPageType","palette","dispatch","navigate","isNonMobile","isLogin","isRegister","handleFormSubmit","values","onSubmitProps","onSubmit","initialValues","validationSchema","children","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","resetForm","obSubmit","display","gap","gridTemplateColumns","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hansonliao/react101/Github/social-media-2/client/src/scenes/loginPage/Form.jsx"],"sourcesContent":["// REGISTER FOR A NEW ACCOUNT\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  TextField,\n  useMediaQuery,\n  Typography,\n  useTheme,\n} from \"@mui/material\";\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { setLogin } from \"../../state/index\";\nimport Dropzone from \"../../components/FlexBetween\";\nimport FlexBetween from \"../../components/FlexBetween\";\n\nconst registerSchema = yup.object().shape({\n  //wen validating user inputs, automated form private app \"yup\"\n  firstName: yup.string().required(\"required\"),\n  lastName: yup.string().required(\"required\"),\n  email: yup.string().email(\"invalid email\").required(\"required\"),\n  password: yup.string().required(\"required\"),\n  location: yup.string().required(\"required\"),\n  occupation: yup.string().required(\"required\"),\n  picture: yup.string().required(\"required\"),\n});\n\nconst loginSchema = yup.object().shape({\n  email: yup.string().email(\"invalid email\").required(\"required\"),\n  password: yup.string().required(\"required\"),\n});\n\nconst initialValuesRegister = {\n  //sets initial values\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  location: \"\",\n  occupation: \"\",\n  picture: \"\",\n};\n\nconst initialValuesLogin = {\n  email: \"\",\n  password: \"\",\n};\n\nconst Form = () => {\n  const [pageType, setPageType] = useState(\"Login\");\n  const { palette } = useTheme;\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const isNonMobile = useMediaQuery(\"(min-width: 600px\");\n\n  const isLogin = pageType === \"login\";\n  const isRegister = pageType === \"register\";\n\n  const handleFormSubmit = async (values, onSubmitProps) => {};\n\n  return (\n    <Formik\n      onSubmit={handleFormSubmit}\n      initialValues={isLogin ? initialValuesLogin : initialValuesRegister} //IF we're on the isLogin page, THEN we initial the page with isLogin data. IF we're on register page, we submit the page with isRegister data\n      validationSchema={isLogin ? loginSchema : registerSchema} //using formic to validate user inputs\n    >\n      {(\n        {\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          setFieldValue,\n          resetForm,\n        } //these values allow u to use them inside your components\n      ) => <form obSubmit={handleSubmit}>\n        <Box display=\"grid\"\n          gap=\"30px\"\n          gridTemplateColumns=\"repeat(4, minmax(0, 1fr)\" >\n\n        </Box>\n        </form>}\n    </Formik>\n  );\n};\n\nexport default Form;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}