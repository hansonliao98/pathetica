{"ast":null,"code":"var _jsxFileName = \"/Users/hansonliao/react101/Github/social-media-2/client/src/components/Friend.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import { PersonAddOutlined, PersonRemoveOutlined } from \"@mui/icons-material\";\n// import { Box, IconButton, Typography, useTheme } from \"@mui/material\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { setFriends } from \"../state/index\";\n// import FlexBetween from \"./FlexBetween\";\n// import UserImage from \"./UserImage\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const Friend = ({ friendId, name, subtitle, userPicturePath }) => {\n//   const dispatch = useDispatch();\n//   const navigate = useNavigate();\n//   const { _id } = useSelector((state) => state.user);\n//   const token = useSelector((state) => state.token);\n//   const friends = useSelector((state) => state.user.friends);\n\n//   const { palette } = useTheme();\n//   const primaryLight = palette.primary.light;\n//   const primaryDark = palette.primary.dark;\n//   const main = palette.neutral.main;\n//   const medium = palette.neutral.medium;\n\n//   const isFriend = friends.find((friend) => friend._id === friendId); //BOOLEAN: check if the other user is this user's friend\n\n//   const patchFriend = async () => {\n//     //for adding or subtracting friend\n//     const response = await fetch(\n//       `http://localhost:3001/users/${_id}/${friendId}`,\n//       {\n//         method: \"PATCH\", //PATCH = partial modifications to a resource, more info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           \"Content-Type\": \"application/json\", //authentication\n//         },\n//       }\n//     );\n//     const data = await response.json();\n//     dispatch(setFriends({ friends: data })); //save dataset of friends to global state\n//   };\n\n//   return (\n//     <FlexBetween>\n//       <FlexBetween gap=\"1rem\">\n//         <UserImage image={userPicturePath} size=\"55px\" />\n//         <Box\n//           onClick={() => {\n//             navigate(`/profile/${friendId}`);\n//             navigate(0);\n//           }}\n//         >\n//           <Typography\n//             color={main}\n//             variant=\"h5\"\n//             fontWeight=\"500\"\n//             sx={{\n//               \"&:hover\": {\n//                 color: palette.primary.light,\n//                 cursor: \"pointer\",\n//               },\n//             }}\n//           >\n//             {name}\n//           </Typography>\n//           <Typography color={medium} fontSize=\"0.75rem\">\n//             {subtitle}\n//           </Typography>\n//         </Box>\n//       </FlexBetween>\n//       <IconButton\n//         onClick={() => patchFriend()}\n//         sx={{\n//           backgroundColor: primaryLight,\n//           p: \"0.6rem\",\n//         }}\n//       >\n//         {isFriend ? (\n//           <PersonRemoveOutlined sx={{ color: primaryDark }} />\n//         ) : (\n//           <PersonAddOutlined sx={{ color: primaryDark }} />\n//         )}\n//       </IconButton>\n//     </FlexBetween>\n//   );\n// };\n\n// export default Friend;\n\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setFriends } from \"../state/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Friend = ({\n  friendId,\n  name,\n  subtitle,\n  userPicturePath\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    _id\n  } = useSelector(state => state.user);\n  const token = useSelector(state => state.token);\n  const patchFriend = async () => {\n    //for adding or subtracting friend\n    const response = await fetch(`http://localhost:3001/users/${_id}/${friendId}`, {\n      method: \"PATCH\",\n      //PATCH = partial modifications to a resource, more info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\" //authentication\n      }\n    });\n\n    const data = await response.json();\n    dispatch(setFriends({\n      friends: data\n    })); //save dataset of friends to global state\n    const isFriend = await friends.find(friend => friend._id === friendId); //BOOLEAN: check if the other user is this user's friend\n  };\n\n  const friends = useSelector(state => state.user.friends);\n  console.log(friends);\n  useEffect(() => {\n    console.log(\"useEffect Called!\");\n    patchFriend();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(Friend, \"Znrg3IkXulEE3ZXnouE5go9Zd4Y=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = Friend;\nexport default Friend;\nvar _c;\n$RefreshReg$(_c, \"Friend\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","setFriends","jsxDEV","_jsxDEV","Friend","friendId","name","subtitle","userPicturePath","_s","dispatch","_id","state","user","token","patchFriend","response","fetch","method","headers","Authorization","data","json","friends","isFriend","find","friend","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hansonliao/react101/Github/social-media-2/client/src/components/Friend.jsx"],"sourcesContent":["// import React from \"react\";\n// import { PersonAddOutlined, PersonRemoveOutlined } from \"@mui/icons-material\";\n// import { Box, IconButton, Typography, useTheme } from \"@mui/material\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { setFriends } from \"../state/index\";\n// import FlexBetween from \"./FlexBetween\";\n// import UserImage from \"./UserImage\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const Friend = ({ friendId, name, subtitle, userPicturePath }) => {\n//   const dispatch = useDispatch();\n//   const navigate = useNavigate();\n//   const { _id } = useSelector((state) => state.user);\n//   const token = useSelector((state) => state.token);\n//   const friends = useSelector((state) => state.user.friends);\n\n//   const { palette } = useTheme();\n//   const primaryLight = palette.primary.light;\n//   const primaryDark = palette.primary.dark;\n//   const main = palette.neutral.main;\n//   const medium = palette.neutral.medium;\n\n//   const isFriend = friends.find((friend) => friend._id === friendId); //BOOLEAN: check if the other user is this user's friend\n\n//   const patchFriend = async () => {\n//     //for adding or subtracting friend\n//     const response = await fetch(\n//       `http://localhost:3001/users/${_id}/${friendId}`,\n//       {\n//         method: \"PATCH\", //PATCH = partial modifications to a resource, more info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           \"Content-Type\": \"application/json\", //authentication\n//         },\n//       }\n//     );\n//     const data = await response.json();\n//     dispatch(setFriends({ friends: data })); //save dataset of friends to global state\n//   };\n\n//   return (\n//     <FlexBetween>\n//       <FlexBetween gap=\"1rem\">\n//         <UserImage image={userPicturePath} size=\"55px\" />\n//         <Box\n//           onClick={() => {\n//             navigate(`/profile/${friendId}`);\n//             navigate(0);\n//           }}\n//         >\n//           <Typography\n//             color={main}\n//             variant=\"h5\"\n//             fontWeight=\"500\"\n//             sx={{\n//               \"&:hover\": {\n//                 color: palette.primary.light,\n//                 cursor: \"pointer\",\n//               },\n//             }}\n//           >\n//             {name}\n//           </Typography>\n//           <Typography color={medium} fontSize=\"0.75rem\">\n//             {subtitle}\n//           </Typography>\n//         </Box>\n//       </FlexBetween>\n//       <IconButton\n//         onClick={() => patchFriend()}\n//         sx={{\n//           backgroundColor: primaryLight,\n//           p: \"0.6rem\",\n//         }}\n//       >\n//         {isFriend ? (\n//           <PersonRemoveOutlined sx={{ color: primaryDark }} />\n//         ) : (\n//           <PersonAddOutlined sx={{ color: primaryDark }} />\n//         )}\n//       </IconButton>\n//     </FlexBetween>\n//   );\n// };\n\n// export default Friend;\n\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setFriends } from \"../state/index\";\n\nconst Friend = ({ friendId, name, subtitle, userPicturePath }) => {\n  const dispatch = useDispatch();\n  const { _id } = useSelector((state) => state.user);\n  const token = useSelector((state) => state.token);\n\n  const patchFriend = async () => {\n    //for adding or subtracting friend\n    const response = await fetch(\n      `http://localhost:3001/users/${_id}/${friendId}`,\n      {\n        method: \"PATCH\", //PATCH = partial modifications to a resource, more info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\", //authentication\n        },\n      }\n    );\n    const data = await response.json();\n    dispatch(setFriends({ friends: data })); //save dataset of friends to global state\n    const isFriend = await friends.find((friend) => friend._id === friendId); //BOOLEAN: check if the other user is this user's friend\n  };\n\n  const friends = useSelector((state) => state.user.friends);\n  console.log(friends);\n\n  useEffect(() => {\n    console.log(\"useEffect Called!\");\n    patchFriend();\n  }, []);\n\n  return (\n    <div>\n      <h1>{name}</h1>\n    </div>\n  );\n};\n\nexport default Friend;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,MAAM,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,IAAI;EAAEC,QAAQ;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAChE,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEW;EAAI,CAAC,GAAGZ,WAAW,CAAEa,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;EAClD,MAAMC,KAAK,GAAGf,WAAW,CAAEa,KAAK,IAAKA,KAAK,CAACE,KAAK,CAAC;EAEjD,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,+BAA8BN,GAAI,IAAGN,QAAS,EAAC,EAChD;MACEa,MAAM,EAAE,OAAO;MAAE;MACjBC,OAAO,EAAE;QACPC,aAAa,EAAG,UAASN,KAAM,EAAC;QAChC,cAAc,EAAE,kBAAkB,CAAE;MACtC;IACF,CACF,CAAC;;IACD,MAAMO,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClCZ,QAAQ,CAACT,UAAU,CAAC;MAAEsB,OAAO,EAAEF;IAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACzC,MAAMG,QAAQ,GAAG,MAAMD,OAAO,CAACE,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACf,GAAG,KAAKN,QAAQ,CAAC,CAAC,CAAC;EAC5E,CAAC;;EAED,MAAMkB,OAAO,GAAGxB,WAAW,CAAEa,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACU,OAAO,CAAC;EAC1DI,OAAO,CAACC,GAAG,CAACL,OAAO,CAAC;EAEpBzB,SAAS,CAAC,MAAM;IACd6B,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAChCb,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA;IAAA0B,QAAA,eACE1B,OAAA;MAAA0B,QAAA,EAAKvB;IAAI;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV,CAAC;AAACxB,EAAA,CAnCIL,MAAM;EAAA,QACOJ,WAAW,EACZD,WAAW,EACbA,WAAW,EAmBTA,WAAW;AAAA;AAAAmC,EAAA,GAtBvB9B,MAAM;AAqCZ,eAAeA,MAAM;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}