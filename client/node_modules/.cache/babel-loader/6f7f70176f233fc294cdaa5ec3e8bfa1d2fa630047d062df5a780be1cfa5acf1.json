{"ast":null,"code":"var _jsxFileName = \"/Users/hansonliao/react101/Github/social-media-2/client/src/scenes/loginPage/Form.jsx\",\n  _s = $RefreshSig$();\n// REGISTER FOR A NEW ACCOUNT\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { Box, Button, TextField, useMediaQuery, Typography, useTheme } from \"@mui/material\";\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { setLogin } from \"../../state/index\";\nimport Dropzone from \"../../components/FlexBetween\";\nimport FlexBetween from \"../../components/FlexBetween\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst registerSchema = yup.object().shape({\n  //wen validating user inputs, automated form private app \"yup\"\n  firstName: yup.string().required(\"required\"),\n  lastName: yup.string().required(\"required\"),\n  email: yup.string().email(\"invalid email\").required(\"required\"),\n  password: yup.string().required(\"required\"),\n  location: yup.string().required(\"required\"),\n  occupation: yup.string().required(\"required\"),\n  picture: yup.string().required(\"required\")\n});\nconst loginSchema = yup.object().shape({\n  email: yup.string().email(\"invalid email\").required(\"required\"),\n  password: yup.string().required(\"required\")\n});\nconst initialValuesRegister = {\n  //sets initial values\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  location: \"\",\n  occupation: \"\",\n  picture: \"\"\n};\nconst initialValuesLogin = {\n  email: \"\",\n  password: \"\"\n};\nconst Form = () => {\n  _s();\n  const [pageType, setPageType] = useState(\"Login\");\n  const {\n    palette\n  } = useTheme;\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const isNonMobile = useMediaQuery(\"(min-width: 600px\");\n  const isLogin = pageType === \"login\";\n  const isRegister = pageType === \"register\";\n  const register = async (values, onsubmitProps) => {\n    // The following lets us send form info with image\n    const formData = new FormData(); //an object that must be added in unique way:\n    for (let value in values) {\n      formData.append(value, values[value]); //loop through every key value in this object, and APPEND it to formData\n    }\n\n    formData.append(\"picturePath\", values.picture.name); //name of the image (ex: light.jpeg) IS the picturePath we set\n\n    const saveUserResponse = await fetch(\"http://localhost:3001/auth/register\", {\n      method: \"POST\",\n      body: formData\n    });\n  };\n  const handleFormSubmit = async (values, onSubmitProps) => {\n    if (isLogin) await login(values, onSubmitProps);\n    if (isRegister) await register(values, onSubmitProps);\n  };\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    onSubmit: handleFormSubmit //here, the handleSubmit we made directly connects to the handleFormSubmit() function\n    ,\n    initialValues: isLogin ? initialValuesLogin : initialValuesRegister //IF we're on the isLogin page, THEN we initial the page with isLogin data. IF we're on register page, we submit the page with isRegister data\n    ,\n    validationSchema: isLogin ? loginSchema : registerSchema //using formic to validate user inputs\n    ,\n    children: ({\n      values,\n      errors,\n      touched,\n      handleBlur,\n      handleChange,\n      handleSubmit,\n      setFieldValue,\n      resetForm\n    } //these values allow u to use them inside your components\n    ) => /*#__PURE__*/_jsxDEV(\"form\", {\n      obSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        display: \"grid\",\n        gap: \"30px\",\n        gridTemplateColumns: \"repeat(4, minmax(0, 1fr))\" //MEANING: we're gonna split our grid into 4 sections. minsize of 0, otherwise split into equal fractions of 4\n        ,\n        sx: {\n          //targeting ANY DIVs RIGHT UNDER THIS ELEMENT as a child class will have the following:\n          \"& > div\": {\n            gridColumn: isNonMobile ? undefined : \"span 4\"\n          } //this takes priority over other styles\n        },\n        children: [isRegister && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            label: \"First Name\",\n            onBlur: handleBlur,\n            onChange: handleChange,\n            value: values.firstName,\n            name: \"firstName\" //MUST be the same as the initialValues\n            ,\n            error: Boolean(touched.firstName) && Boolean(errors.firstName) //check if label has been touched AND if theres an error\n            ,\n            helpText: touched.firstName && errors.firstName //If touched and has an error, we SHOW THIS INPUT AS WRONG\n            ,\n            sx: {\n              gridColumn: \"span 2\"\n            } //remember: Large screens have \"span 2\", smaller screen \"span 4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Last Name\",\n            onBlur: handleBlur,\n            onChange: handleChange,\n            value: values.lastName,\n            name: \"lastName\" //MUST be the same as the initialValues\n            ,\n            error: Boolean(touched.lastName) && Boolean(errors.lastName) //check if label has been touched AND if theres an error\n            ,\n            helpText: touched.lastName && errors.lastName //If touched and has an error, we SHOW THIS INPUT AS WRONG\n            ,\n            sx: {\n              gridColumn: \"span 2\"\n            } //remember: Large screens have \"span 2\", smaller screen \"span 4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Location\",\n            onBlur: handleBlur,\n            onChange: handleChange,\n            value: values.location,\n            name: \"location\" //MUST be the same as the initialValues\n            ,\n            error: Boolean(touched.location) && Boolean(errors.location) //check if label has been touched AND if theres an error\n            ,\n            helpText: touched.location && errors.location //If touched and has an error, we SHOW THIS INPUT AS WRONG\n            ,\n            sx: {\n              gridColumn: \"span 4\"\n            } //remember: Large screens have \"span 2\", smaller screen \"span 4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Occupation\",\n            onBlur: handleBlur,\n            onChange: handleChange,\n            value: values.occupation,\n            name: \"occupation\" //MUST be the same as the initialValues\n            ,\n            error: Boolean(touched.occupation) && Boolean(errors.occupation) //check if label has been touched AND if theres an error\n            ,\n            helpText: touched.occupation && errors.occupation //If touched and has an error, we SHOW THIS INPUT AS WRONG\n            ,\n            sx: {\n              gridColumn: \"span 4\"\n            } //remember: Large screens have \"span 2\", smaller screen \"span 4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            gridColumn: \"span 4\",\n            border: `1px solid ${palette.neutral.medium}`,\n            borderRadius: \"5px\",\n            p: \"1rem\",\n            children: /*#__PURE__*/_jsxDEV(Dropzone, {\n              acceptedFiles: \".jps,.jpeg,.png,\",\n              multiple: false,\n              onDrop: acceptedFiles => setFieldValue(\"picture\", acceptedFiles[0]) //dropzone is a third party app, so we need to set this field's value manually, UNLKE the inputs before this one that are programmed with react.\n              ,\n              children: ({\n                getRootProps,\n                getInputProps\n              }) => {\n                /*#__PURE__*/_jsxDEV(Box, {\n                  ...getRootProps(),\n                  //MUST do with dropzone app. MUST pass the arguments into the immediate div underneath that the dropzone app with be in\n                  border: `2px dashed ${palette.primary.main}`,\n                  p: \"rem\",\n                  sx: {\n                    \"&:hover\": {\n                      cursor: \"pointer\"\n                    }\n                  } //on hover MUI condition\n                  ,\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    ...getInputProps()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 182,\n                    columnNumber: 25\n                  }, this), !values.picture, \" ? ( \", /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Add picture here\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 184,\n                    columnNumber: 25\n                  }, this), \" : (\", /*#__PURE__*/_jsxDEV(FlexBetween, {\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      children: values.picture.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 186,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(EditOutlinedIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 187,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 25\n                  }, this), \") )\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 23\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Email\",\n          onBlur: handleBlur,\n          onChange: handleChange,\n          value: values.email,\n          name: \"email\" //MUST be the same as the initialValues\n          ,\n          error: Boolean(touched.email) && Boolean(errors.email) //check if label has been touched AND if theres an error\n          ,\n          helpText: touched.email && errors.email //If touched and has an error, we SHOW THIS INPUT AS WRONG\n          ,\n          sx: {\n            gridColumn: \"span 4\"\n          } //remember: Large screens have \"span 2\", smaller screen \"span 4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"password\",\n          type: \"password\",\n          onBlur: handleBlur,\n          onChange: handleChange,\n          value: values.password,\n          name: \"password\" //MUST be the same as the initialValues\n          ,\n          error: Boolean(touched.password) && Boolean(errors.password) //check if label has been touched AND if theres an error\n          ,\n          helpText: touched.password && errors.password //If touched and has an error, we SHOW THIS INPUT AS WRONG\n          ,\n          sx: {\n            gridColumn: \"span 4\"\n          } //remember: Large screens have \"span 2\", smaller screen \"span 4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          fullwidth: true,\n          type: \"submit\",\n          sx: {\n            m: \"2rem\",\n            p: \"1rem\",\n            backgroundColor: palette.primary.main,\n            color: palette.background.alt,\n            \"&:hover\": {\n              color: palette.primary.main\n            }\n          },\n          children: isLogin ? \"LOGIN\" : \"REGISTER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography //text for switching between login and register\n        , {\n          onClick: () => {\n            setPageType(isLogin ? \"register\" : \"login\");\n            resetForm();\n          },\n          sx: {\n            textDecoration: \"underline\",\n            color: palette.primary.main,\n            \"&:hover\": {\n              cursor: \"pointer\",\n              color: palette.primary.light\n            }\n          },\n          children: isLogin ? \"Don't have an account? Sign Up here.\" : \"Already have an account? Login here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(Form, \"TEk9RduZFdpPjPrtOTkOHnB18mE=\", false, function () {\n  return [useDispatch, useNavigate, useMediaQuery];\n});\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","Box","Button","TextField","useMediaQuery","Typography","useTheme","EditOutlinedIcon","Formik","yup","useNavigate","useDispatch","setLogin","Dropzone","FlexBetween","jsxDEV","_jsxDEV","Fragment","_Fragment","registerSchema","object","shape","firstName","string","required","lastName","email","password","location","occupation","picture","loginSchema","initialValuesRegister","initialValuesLogin","Form","_s","pageType","setPageType","palette","dispatch","navigate","isNonMobile","isLogin","isRegister","register","values","onsubmitProps","formData","FormData","value","append","name","saveUserResponse","fetch","method","body","handleFormSubmit","onSubmitProps","login","onSubmit","initialValues","validationSchema","children","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","resetForm","obSubmit","display","gap","gridTemplateColumns","sx","gridColumn","undefined","label","onBlur","onChange","error","Boolean","helpText","fileName","_jsxFileName","lineNumber","columnNumber","border","neutral","medium","borderRadius","p","acceptedFiles","multiple","onDrop","getRootProps","getInputProps","primary","main","cursor","type","fullwidth","m","backgroundColor","color","background","alt","onClick","textDecoration","light","_c","$RefreshReg$"],"sources":["/Users/hansonliao/react101/Github/social-media-2/client/src/scenes/loginPage/Form.jsx"],"sourcesContent":["// REGISTER FOR A NEW ACCOUNT\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  TextField,\n  useMediaQuery,\n  Typography,\n  useTheme,\n} from \"@mui/material\";\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { setLogin } from \"../../state/index\";\nimport Dropzone from \"../../components/FlexBetween\";\nimport FlexBetween from \"../../components/FlexBetween\";\n\nconst registerSchema = yup.object().shape({\n  //wen validating user inputs, automated form private app \"yup\"\n  firstName: yup.string().required(\"required\"),\n  lastName: yup.string().required(\"required\"),\n  email: yup.string().email(\"invalid email\").required(\"required\"),\n  password: yup.string().required(\"required\"),\n  location: yup.string().required(\"required\"),\n  occupation: yup.string().required(\"required\"),\n  picture: yup.string().required(\"required\"),\n});\n\nconst loginSchema = yup.object().shape({\n  email: yup.string().email(\"invalid email\").required(\"required\"),\n  password: yup.string().required(\"required\"),\n});\n\nconst initialValuesRegister = {\n  //sets initial values\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  location: \"\",\n  occupation: \"\",\n  picture: \"\",\n};\n\nconst initialValuesLogin = {\n  email: \"\",\n  password: \"\",\n};\n\nconst Form = () => {\n  const [pageType, setPageType] = useState(\"Login\");\n  const { palette } = useTheme;\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const isNonMobile = useMediaQuery(\"(min-width: 600px\");\n\n  const isLogin = pageType === \"login\";\n  const isRegister = pageType === \"register\";\n\n  const register = async (values, onsubmitProps) => {\n    // The following lets us send form info with image\n    const formData = new FormData(); //an object that must be added in unique way:\n    for (let value in values) {\n      formData.append(value, values[value]); //loop through every key value in this object, and APPEND it to formData\n    }\n    formData.append(\"picturePath\", values.picture.name); //name of the image (ex: light.jpeg) IS the picturePath we set\n\n    const saveUserResponse = await fetch(\n      \"http://localhost:3001/auth/register\",\n      {\n        method: \"POST\",\n        body: formData,\n      }\n    );\n  };\n\n  const handleFormSubmit = async (values, onSubmitProps) => {\n    if (isLogin) await login(values, onSubmitProps);\n    if (isRegister) await register(values, onSubmitProps);\n  };\n\n  return (\n    <Formik\n      onSubmit={handleFormSubmit} //here, the handleSubmit we made directly connects to the handleFormSubmit() function\n      initialValues={isLogin ? initialValuesLogin : initialValuesRegister} //IF we're on the isLogin page, THEN we initial the page with isLogin data. IF we're on register page, we submit the page with isRegister data\n      validationSchema={isLogin ? loginSchema : registerSchema} //using formic to validate user inputs\n    >\n      {(\n        {\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          setFieldValue,\n          resetForm,\n        } //these values allow u to use them inside your components\n      ) => (\n        <form obSubmit={handleSubmit}>\n          <Box\n            display=\"grid\"\n            gap=\"30px\"\n            gridTemplateColumns=\"repeat(4, minmax(0, 1fr))\" //MEANING: we're gonna split our grid into 4 sections. minsize of 0, otherwise split into equal fractions of 4\n            sx={{\n              //targeting ANY DIVs RIGHT UNDER THIS ELEMENT as a child class will have the following:\n              \"& > div\": { gridColumn: isNonMobile ? undefined : \"span 4\" }, //this takes priority over other styles\n            }}\n          >\n            {isRegister && (\n              <>\n                <TextField\n                  label=\"First Name\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.firstName}\n                  name=\"firstName\" //MUST be the same as the initialValues\n                  error={\n                    Boolean(touched.firstName) && Boolean(errors.firstName)\n                  } //check if label has been touched AND if theres an error\n                  helpText={touched.firstName && errors.firstName} //If touched and has an error, we SHOW THIS INPUT AS WRONG\n                  sx={{ gridColumn: \"span 2\" }} //remember: Large screens have \"span 2\", smaller screen \"span 4\"\n                />\n                <TextField\n                  label=\"Last Name\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.lastName}\n                  name=\"lastName\" //MUST be the same as the initialValues\n                  error={Boolean(touched.lastName) && Boolean(errors.lastName)} //check if label has been touched AND if theres an error\n                  helpText={touched.lastName && errors.lastName} //If touched and has an error, we SHOW THIS INPUT AS WRONG\n                  sx={{ gridColumn: \"span 2\" }} //remember: Large screens have \"span 2\", smaller screen \"span 4\"\n                />\n                <TextField\n                  label=\"Location\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.location}\n                  name=\"location\" //MUST be the same as the initialValues\n                  error={Boolean(touched.location) && Boolean(errors.location)} //check if label has been touched AND if theres an error\n                  helpText={touched.location && errors.location} //If touched and has an error, we SHOW THIS INPUT AS WRONG\n                  sx={{ gridColumn: \"span 4\" }} //remember: Large screens have \"span 2\", smaller screen \"span 4\"\n                />\n                <TextField\n                  label=\"Occupation\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.occupation}\n                  name=\"occupation\" //MUST be the same as the initialValues\n                  error={\n                    Boolean(touched.occupation) && Boolean(errors.occupation)\n                  } //check if label has been touched AND if theres an error\n                  helpText={touched.occupation && errors.occupation} //If touched and has an error, we SHOW THIS INPUT AS WRONG\n                  sx={{ gridColumn: \"span 4\" }} //remember: Large screens have \"span 2\", smaller screen \"span 4\"\n                />\n                {/* image upload box */}\n                <Box\n                  gridColumn=\"span 4\"\n                  border={`1px solid ${palette.neutral.medium}`}\n                  borderRadius=\"5px\"\n                  p=\"1rem\"\n                >\n                  <Dropzone\n                    acceptedFiles=\".jps,.jpeg,.png,\"\n                    multiple={false}\n                    onDrop={\n                      (acceptedFiles) =>\n                        setFieldValue(\"picture\", acceptedFiles[0]) //dropzone is a third party app, so we need to set this field's value manually, UNLKE the inputs before this one that are programmed with react.\n                    }\n                  >\n                    {({ getRootProps, getInputProps }) => {\n                      <Box\n                        {...getRootProps()} //MUST do with dropzone app. MUST pass the arguments into the immediate div underneath that the dropzone app with be in\n                        border={`2px dashed ${palette.primary.main}`}\n                        p=\"rem\"\n                        sx={{ \"&:hover\": { cursor: \"pointer\" } }} //on hover MUI condition\n                      >\n                        <input {...getInputProps()} />\n                        {!values.picture} ? ( {/* picture upload widget */}\n                        <p>Add picture here</p> : (\n                        <FlexBetween>\n                          <Typography>{values.picture.name}</Typography>\n                          <EditOutlinedIcon />\n                        </FlexBetween>\n                        ) )\n                      </Box>;\n                    }}\n                  </Dropzone>\n                </Box>\n              </>\n            )}\n\n            <TextField\n              label=\"Email\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              value={values.email}\n              name=\"email\" //MUST be the same as the initialValues\n              error={Boolean(touched.email) && Boolean(errors.email)} //check if label has been touched AND if theres an error\n              helpText={touched.email && errors.email} //If touched and has an error, we SHOW THIS INPUT AS WRONG\n              sx={{ gridColumn: \"span 4\" }} //remember: Large screens have \"span 2\", smaller screen \"span 4\"\n            />\n            <TextField\n              label=\"password\"\n              type=\"password\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              value={values.password}\n              name=\"password\" //MUST be the same as the initialValues\n              error={Boolean(touched.password) && Boolean(errors.password)} //check if label has been touched AND if theres an error\n              helpText={touched.password && errors.password} //If touched and has an error, we SHOW THIS INPUT AS WRONG\n              sx={{ gridColumn: \"span 4\" }} //remember: Large screens have \"span 2\", smaller screen \"span 4\"\n            />\n          </Box>\n          {/* BUTTONS FOR SWITCHING BETWEEN REGISTER AND LOGIN */}\n          <Box>\n            <Button\n              fullwidth\n              type=\"submit\"\n              sx={{\n                m: \"2rem\",\n                p: \"1rem\",\n                backgroundColor: palette.primary.main,\n                color: palette.background.alt,\n                \"&:hover\": { color: palette.primary.main },\n              }}\n            >\n              {isLogin ? \"LOGIN\" : \"REGISTER\"}\n            </Button>\n            <Typography //text for switching between login and register\n              onClick={() => {\n                setPageType(isLogin ? \"register\" : \"login\");\n                resetForm();\n              }}\n              sx={{\n                textDecoration: \"underline\",\n                color: palette.primary.main,\n                \"&:hover\": {\n                  cursor: \"pointer\",\n                  color: palette.primary.light,\n                },\n              }}\n            >\n              {isLogin\n                ? \"Don't have an account? Sign Up here.\"\n                : \"Already have an account? Login here\"}\n            </Typography>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default Form;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}